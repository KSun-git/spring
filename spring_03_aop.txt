==================┌[spring_03_aop]┐==================
1>AOP,Aspect Oriented Programming
    관점지향프로그래밍기법. 문제 해결을 위한 '핵심관심사항'과, 전체에 적용되는 '공통관심사항'을 
    기준으로 프로그래밍하여 공통 모듈을 여러 코드에 쉽게 적용할 수 있도록 해준다.
    결국은 공통된 기능을 잘라냈다고 하여, AOP를 크로스 컷팅(Cross,Cutting)이라고도 한다.
    ※장점
      -흩어져있던 공통 기능이 하나의 장소에서 관리됨
      -개발자는 본인의 목적에만 충실할 수 있다, 그외 사항들은 신경쓰지 않아도 된다.

2>AOP용어 
    -Target,타겟
      부가기능을 부여할 대상(핵심관심사항). Aspect가 적용되는 위치.

    -Aspect,에스펙트
      핵심기능에 부가되어 의미를 갖는 부가기능 모듈. 에스펙트는 부가될 기능을 정의한 Advice와,
      Advice를 어디에 적용할지를 결정하는 PointCut을 함께 가지고있다.

    -Advice,어드바이스
      실질적으로 부가기능을 담은 구현체. 어드바이스는 Aspect가 '무엇'을 '언제'할지 정의함.
      (Before/After/After-Returnning/After-Throwing/Around)

    -PointCut,포인트컷
      Advice를 적용할 JoinPoint를 선별하는 기능을 정의한 모듈

    -JoinPoint,조인포인트
      Advice가 적용될 수 있는 위치(메소드)

    -Proxy,프록시
      타겟을 감싸서 타겟의 요청을 대신 받아주는 랩핑(Wrapping)오브젝트.(똑같이 닮은 가짜)

    -Weaving,위빙
      지정된 객체에 Aspect를 적용해서 새로운 프록시 객체를 생성하는 과정.

3-1>설정파일(aop.xml) 이용하여 aop실습
        ---------------------------┌{part01_xml}┐---------------------------
        <<aop.xml>>
          |[*] Namespace : aop등록
          |[1] Target 빈 선언
          |[2] Aspect 빈 선언
          |[3] Advice(관계)설정

3-2>어노테이션을 이용하여 Advice설정
        -----------------------┌{part02_annotation}┐-----------------------
        <<pom.xml>>
          |[*] aspectj 등록

        <<aop.xml>>
          |[*] Namespace : aop등록
          |[1] <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
          |[2] Target 빈 선언
          |[3] Aspect 빈 선언

3-3>메소드의 소요시간 구하기 (Around)
        ---------------------------┌{part03_exam}┐---------------------------
        직접 해보세요.